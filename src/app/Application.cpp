/*
  ==============================================================================

    This file was auto-generated by the Introjucer!

    It contains the basic startup code for a Juce application.

  ==============================================================================
*/

#include "core/Settings.h"
#include "core/Processor.h"
#include "gui/AudioEditor.h"
#include "app/AppWindow.h"
#include "app/AudioEngine.h"
#include "app/Application.h"


namespace e3 {

    //------------------------------------------------------------------------------------------
    // Application
    //------------------------------------------------------------------------------------------

    Application::Application() {}
    Application::~Application() {}


    void Application::initialise(const String&)
    {
        audioEngine_ = new AudioEngine();
        AudioEditor* editor = dynamic_cast<AudioEditor*>(audioEngine_->getProcessor()->createEditorIfNeeded());

        window_ = new AppWindow(ProjectInfo::displayName);
        window_->setTitleBarButtonsRequired(DocumentWindow::allButtons, false);
        window_->setResizable(true, true);

        Image icon;
        editor->createIcon(icon);
        window_->setIcon(icon);

        window_->setContentOwned(editor, true);

        std::string windowState = getSettings()->getWindowState("Standalone");
        window_->restoreWindowStateFromString(windowState);
        window_->setLookAndFeel(editor->skin_);
        window_->setWantsKeyboardFocus(false);
        window_->setVisible(true);
    }


    void Application::shutdown()
    {
        audioEngine_->stopPlaying();
        if (AudioProcessorEditor* editor = dynamic_cast<AudioProcessorEditor*> (window_->getContentComponent()))
        {
            getSettings()->setWindowState(window_->getWindowStateAsString().toStdString(), "Standalone");
            audioEngine_->getProcessor()->editorBeingDeleted(editor);
            window_->clearContentComponent();
        }

        getSettings()->store();

        audioEngine_ = nullptr;
        window_      = nullptr;
    }


    AudioEngine* Application::getAudioEngine()          { return audioEngine_; }
    AudioDeviceManager* Application::getDeviceManager() { return audioEngine_->getDeviceManager(); }
    AudioProcessor* Application::getProcessor() const   { return audioEngine_->getProcessor(); }

    Application* Application::getApp()    { return dynamic_cast<Application*>(JUCEApplication::getInstance()); }
    Settings* Application::getSettings()  { 
        Processor* p = dynamic_cast<Processor*>(getApp()->getProcessor());
        return p->getSettings(); 
    }

    // This macro generates the main() routine that launches the app.
    START_JUCE_APPLICATION(Application)


    AudioProcessor* JUCE_CALLTYPE createPluginFilter()
    {
        return new e3::Processor();
    }
} // namespace e3