

@startuml

!include skin.iuml

title
<font size=24 color=#000000>Class Diagram: Module/Ports</font>

endtitle


class Port {
    +Port::Type type_
    +uint16_t id_
    #uint16_t numVoices_
 }

class Outport {
    virtual void connect(Module*, Link*, VoiceAdapterType) {}
    virtual void disconnect(Module*, Link*) {}

    LinkPointerList targets_;
    size_t numTargets_ = 0;
    Buffer< VoiceAdapterType > adapterBuffer_;
    Buffer< double > modulationBuffer_;
}

class Inport {
    virtual void connect()    {}
    virtual void disconnect() {}
}

class AudioOutport {
    void putValue(double value, uint16_t voice = 0) throw();

    AudioOutBuffer audioOutBuffer_
}


class EventInport {
    Module* module_ = nullptr;
    int paramId_    = -1;
}


class EventOutport {
        void putEvent(double value, uint16_t voice);

        std::vector< EventInport* > inports_;
}

class AudioInport {
    #Buffer<double> audioInBuffer_;
    #int16_t numSources_;
}

/'
class Module {
    ProcessFunctionPointer processFunction_

    int16_t id_
    ModuleType moduleType_
    ProcessingType processingType_
    VoicingType voicingType_
    PortModelList inPortModels_
    PortModelList outPortModels_
    ParameterMap parameters_
    double sampleRate_
    uint16_t numVoices_
    bool mono_
    InPortList inPorts_;
    OutPortList outPorts_;
    Polyphony* polyphony_;
}
'/

Port <|-- Outport
Port <|-- Inport
Inport <|-- AudioInport
Inport <|-- EventInport
Outport <|-- AudioOutport
Outport <|-- EventOutport

'AudioOutport o-- Module
'AudioInport o-- Module
'EventOutport o-- Module


@enduml
