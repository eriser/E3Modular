

@startuml

!include skin.iuml

title
<font size=24 color=#000000>Class Diagram: Ports</font>

endtitle


class Port {
    virtual bool isConnected()
    virtual bool isAudioConnected()
    virtual bool isEventConnect()

    Port::Type type_
    uint16_t id_
    uint16_t numVoices_
 }

class Outport {
    +void connect(Module*, Link*, VoiceAdapterType) {}
    +void disconnect(Module*, Link*) {}
    +void putValue(double value, uint16_t voice = 0) throw();
    +void putEvent(double value, uint16_t voice);

    #uint16_t addAudioTarget( Link* link, VoiceAdapterType adapter );
    #uint16_t addEventTarget( Link* link, VoiceAdapterType adapter );
    #void removeAudioTarget( Link* link );
    #void removeEventTarget( Link* link );

    #LinkList audioTargets_
    #Buffer< double* > audioOutBuffer_
    #Buffer< VoiceAdapterType > audioAdapterBuffer_
    #Buffer< double > audioModulationBuffer_

    #LinkList eventTargets_
    #InportList eventInports_
    #Buffer< VoiceAdapterType > eventAdapterBuffer_
    #Buffer< double > eventModulationBuffer_
}

class Inport {
    double* getAudioBuffer()

    Buffer<double> audioInBuffer_

    Module* eventOwnerModule_
    int eventParamId_    = -1;
}

/'
class AudioOutport {
    void putValue(double value, uint16_t voice = 0) throw();
    AudioOutBuffer audioOutBuffer_
}
'/
/'
class EventInport {
    Module* module_ = nullptr;
    int paramId_    = -1;
}
'/
/'
class EventOutport {
        void putEvent(double value, uint16_t voice);

        std::vector< EventInport* > inports_;
}
'/
/'
class AudioInport {
    Buffer<double> audioInBuffer_;
    int16_t numSources_;
}
'/

/'
class Module {
    ProcessFunctionPointer processFunction_

    int16_t id_
    ModuleType moduleType_
    ProcessingType processingType_
    VoicingType voicingType_
    PortModelList inPortModels_
    PortModelList outPortModels_
    ParameterMap parameters_
    double sampleRate_
    uint16_t numVoices_
    bool mono_
    InPortList inPorts_;
    OutPortList outPorts_;
    Polyphony* polyphony_;
}
'/

Port <|-- Outport
Port <|-- Inport
'Inport <|-- AudioInport
'Inport <|-- EventInport
'Outport <|-- AudioOutport
'Outport <|-- EventOutport

'AudioOutport o-- Module
'AudioInport o-- Module
'EventOutport o-- Module


@enduml
