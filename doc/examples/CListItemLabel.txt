//******************************************************************************
//	CListItemLabel.h
//******************************************************************************
#ifndef	__CListItemLabel_h__
#define __CListItemLabel_h__


#include "juce.h"


//==============================================================================
//	CListItemLabel
//==============================================================================
class CListItemLabel :
	public Label,
	public Timer
{
public:
	CListItemLabel(TableListBox* pOwner, const String& sLabelText = String::empty);

	//	Label overrides.
	virtual void mouseMove(const MouseEvent& e);
	virtual void mouseExit(const MouseEvent& e);
	virtual void mouseDown(const MouseEvent& e);
	virtual void mouseDrag(const MouseEvent& e);
	virtual void mouseUp(const MouseEvent& e);
protected:
	virtual void mouseDoubleClick(const MouseEvent& e);
public:
	virtual void textEditorReturnKeyPressed(TextEditor& ed);
	virtual void textEditorEscapeKeyPressed(TextEditor& ed);
	virtual void paint(Graphics& g);

	//	Timer overrides.
	virtual void timerCallback();

	int GetRow() const { return m_iRow; }
	void SetRow(const int iRow) { m_iRow = iRow; }
	int GetColumnId() const { return m_iColumnId; }
	void SetColumnId(const int iColumnId) { m_iColumnId = iColumnId; }
	void SetRowAndColumnId(const int iRow, const int iColumnId) { SetRow(iRow); SetColumnId(iColumnId); }

	void CreateEditor();
	void CleanupEditor();
	void EnableClickEdit(bool bEnabled = true) { m_bEnableClickEdit = bEnabled; }
	
	TableListBox* GetOwner() const { return m_pOwner; }

	void SetSelected(const bool bSelected = true) { if (m_bSelected != bSelected) m_bSelected = bSelected; }
	bool IsSelected() const { return m_bSelected; }

	void SetDrawLineEnabled(bool bShouldBeEnabled = true) { m_bDrawLineEnabled = bShouldBeEnabled; }
	bool IsDrawLineEnabled() const { return m_bDrawLineEnabled; }

private:
	TableListBox* m_pOwner;
	int		m_iRow;
	int		m_iColumnId;
	bool	m_bClickedtoEdit;
	int		m_iMouseDownX;
	int		m_iMouseDownY;
	bool	m_bEnableClickEdit;
	bool	m_bSelected;
	bool	m_bDrawLineEnabled;
};
#endif	//	!__CListItemLabel_h__

//******************************************************************************
//	CListItemLabel.cpp
//******************************************************************************
#define __CListItemLabel_cpp__


#include "CListItemLabel.h"


//==============================================================================
//	CListItemLabel
//==============================================================================
//------------------------------------------------------------------------------
//	Constructor
//------------------------------------------------------------------------------
CListItemLabel::CListItemLabel(TableListBox* pOwner, const String& sLabelText) :
	Label(T("CListItemLabel"), sLabelText),
	m_pOwner(pOwner),
	m_iRow(-1),
	m_iColumnId(-1),
	m_bClickedtoEdit(false),
	m_bEnableClickEdit(false),
	m_bSelected(false),
	m_bDrawLineEnabled(true)
{
}


//------------------------------------------------------------------------------
//	mouseMove
//------------------------------------------------------------------------------
void CListItemLabel::mouseMove(const MouseEvent& e)
{
	if (isTimerRunning()) {
		if ((abs(e.x - m_iMouseDownX) > 10) || (abs(e.x - m_iMouseDownX) > 10))
			CreateEditor();
	}

	Component* pComponent = getParentComponent();
	if (pComponent != NULL) {
		MouseEvent mEvent = e.getEventRelativeTo(pComponent);
		pComponent->mouseMove(mEvent);
	}
	Label::mouseMove(e);
}


//------------------------------------------------------------------------------
//	mouseExit
//------------------------------------------------------------------------------
void CListItemLabel::mouseExit(const MouseEvent& e)
{
	if (isTimerRunning())
		CreateEditor();
	Label::mouseExit(e);
}


//------------------------------------------------------------------------------
//	mouseDown
//------------------------------------------------------------------------------
void CListItemLabel::mouseDown(const MouseEvent& e)
{
	m_bClickedtoEdit = false;
	if (e.mods.isLeftButtonDown() &&
		(!e.mods.isAnyModifierKeyDown()) &&
		(e.getNumberOfClicks() == 1)) {

		int iLength = getFont().getStringWidth(getText()) + 3;
		if (iLength < 8)
			iLength = 8;
		if (e.x < iLength) {
			SparseSet<int> aiSelectedRows = m_pOwner->getSelectedRows();
			if ((aiSelectedRows.size() == 1) && (aiSelectedRows[0] == GetRow())) {
				m_bClickedtoEdit = m_bEnableClickEdit;
				m_iMouseDownX = e.x;
				m_iMouseDownY = e.y;
			}
		}
	}

	Component* pComponent = getParentComponent();
	if (pComponent != NULL) {
		MouseEvent mEvent = e.getEventRelativeTo(pComponent);
		pComponent->mouseDown(mEvent);
	}
//	Label::mouseDown(e);
}


//------------------------------------------------------------------------------
//	mouseDrag
//------------------------------------------------------------------------------
void CListItemLabel::mouseDrag(const MouseEvent& e)
{
	Component* pComponent = getParentComponent();
	if (pComponent != NULL) {
		MouseEvent mEvent = e.getEventRelativeTo(pComponent);
		pComponent->mouseDrag(mEvent);
	}
//	Label::mouseDrag(e);
}


//------------------------------------------------------------------------------
//	mouseUp
//------------------------------------------------------------------------------
void CListItemLabel::mouseUp(const MouseEvent& e)
{
	if (m_bClickedtoEdit) {
		m_bClickedtoEdit = false;
		startTimer(500);
	}

	Component* pComponent = getParentComponent();
	if (pComponent != NULL) {
		MouseEvent mEvent = e.getEventRelativeTo(pComponent);
		pComponent->mouseUp(mEvent);
	}
//	Label::mouseUp(e);
}


//------------------------------------------------------------------------------
//	mouseDoubleClick
//------------------------------------------------------------------------------
void CListItemLabel::mouseDoubleClick(const MouseEvent& e)
{
	Label::mouseDoubleClick(e);
	if (isTimerRunning())
		stopTimer();

	Component* pComponent = getParentComponent();
	if (pComponent != NULL) {
		MouseEvent mEvent = e.getEventRelativeTo(pComponent);
		pComponent->mouseDoubleClick(mEvent);
	}
}


//------------------------------------------------------------------------------
//	textEditorReturnKeyPressed
//------------------------------------------------------------------------------
void CListItemLabel::textEditorReturnKeyPressed(TextEditor& ed)
{
	Label::textEditorReturnKeyPressed(ed);
	CleanupEditor();
}


//------------------------------------------------------------------------------
//	textEditorEscapeKeyPressed
//------------------------------------------------------------------------------
void CListItemLabel::textEditorEscapeKeyPressed(TextEditor& ed)
{
	Label::textEditorEscapeKeyPressed(ed);
	CleanupEditor();
}


//------------------------------------------------------------------------------
//	timerCallback
//------------------------------------------------------------------------------
void CListItemLabel::timerCallback()
{
	CreateEditor();
}


//------------------------------------------------------------------------------
//	paint
//------------------------------------------------------------------------------
void CListItemLabel::paint(Graphics& g)
{
	if (!isEditable()) {
		Colour mTextColour = (m_pOwner->hasKeyboardFocus(true) && IsSelected())?
			Colours::white: Colours::black;
		setColour(Label::textColourId, mTextColour);
	}

	Label::paint(g);

	if (IsDrawLineEnabled()) {
		g.setColour(Colour(LIST_ROW_COLOUR_RULE));
		g.drawLine((float)(getWidth() - 1), 0, (float)(getWidth() - 1), (float)getHeight());
	}
}


//------------------------------------------------------------------------------
//	CreateEditor
//------------------------------------------------------------------------------
void CListItemLabel::CreateEditor()
{
	if (isTimerRunning())
		stopTimer();
	showEditor();
	setColour(Label::backgroundColourId,	Colours::white);
	setColour(Label::textColourId,			Colours::black);
}


//------------------------------------------------------------------------------
//	CleanupEditor
//------------------------------------------------------------------------------
void CListItemLabel::CleanupEditor()
{
	if (!isEditable()) {
		setColour(Label::backgroundColourId,	Colour(0x00000000));
		setColour(Label::textColourId,			Colours::black);
	}
}



